// Generated by gencpp from file actuators/Vector2.msg
// DO NOT EDIT!


#ifndef ACTUATORS_MESSAGE_VECTOR2_H
#define ACTUATORS_MESSAGE_VECTOR2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actuators
{
template <class ContainerAllocator>
struct Vector2_
{
  typedef Vector2_<ContainerAllocator> Type;

  Vector2_()
    : dual()  {
      dual.assign(0.0);
  }
  Vector2_(const ContainerAllocator& _alloc)
    : dual()  {
  (void)_alloc;
      dual.assign(0.0);
  }



   typedef boost::array<float, 2>  _dual_type;
  _dual_type dual;





  typedef boost::shared_ptr< ::actuators::Vector2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actuators::Vector2_<ContainerAllocator> const> ConstPtr;

}; // struct Vector2_

typedef ::actuators::Vector2_<std::allocator<void> > Vector2;

typedef boost::shared_ptr< ::actuators::Vector2 > Vector2Ptr;
typedef boost::shared_ptr< ::actuators::Vector2 const> Vector2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actuators::Vector2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actuators::Vector2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actuators::Vector2_<ContainerAllocator1> & lhs, const ::actuators::Vector2_<ContainerAllocator2> & rhs)
{
  return lhs.dual == rhs.dual;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actuators::Vector2_<ContainerAllocator1> & lhs, const ::actuators::Vector2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actuators

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::actuators::Vector2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuators::Vector2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuators::Vector2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuators::Vector2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuators::Vector2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuators::Vector2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actuators::Vector2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc6fc6947e0b42110f3e03b6150ecb68";
  }

  static const char* value(const ::actuators::Vector2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc6fc6947e0b4211ULL;
  static const uint64_t static_value2 = 0x0f3e03b6150ecb68ULL;
};

template<class ContainerAllocator>
struct DataType< ::actuators::Vector2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actuators/Vector2";
  }

  static const char* value(const ::actuators::Vector2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actuators::Vector2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[2] dual\n"
;
  }

  static const char* value(const ::actuators::Vector2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actuators::Vector2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dual);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vector2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actuators::Vector2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actuators::Vector2_<ContainerAllocator>& v)
  {
    s << indent << "dual[]" << std::endl;
    for (size_t i = 0; i < v.dual.size(); ++i)
    {
      s << indent << "  dual[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dual[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTUATORS_MESSAGE_VECTOR2_H
