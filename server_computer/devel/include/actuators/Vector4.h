// Generated by gencpp from file actuators/Vector4.msg
// DO NOT EDIT!


#ifndef ACTUATORS_MESSAGE_VECTOR4_H
#define ACTUATORS_MESSAGE_VECTOR4_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actuators
{
template <class ContainerAllocator>
struct Vector4_
{
  typedef Vector4_<ContainerAllocator> Type;

  Vector4_()
    : quad()  {
      quad.assign(0.0);
  }
  Vector4_(const ContainerAllocator& _alloc)
    : quad()  {
  (void)_alloc;
      quad.assign(0.0);
  }



   typedef boost::array<float, 4>  _quad_type;
  _quad_type quad;





  typedef boost::shared_ptr< ::actuators::Vector4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actuators::Vector4_<ContainerAllocator> const> ConstPtr;

}; // struct Vector4_

typedef ::actuators::Vector4_<std::allocator<void> > Vector4;

typedef boost::shared_ptr< ::actuators::Vector4 > Vector4Ptr;
typedef boost::shared_ptr< ::actuators::Vector4 const> Vector4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actuators::Vector4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actuators::Vector4_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actuators::Vector4_<ContainerAllocator1> & lhs, const ::actuators::Vector4_<ContainerAllocator2> & rhs)
{
  return lhs.quad == rhs.quad;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actuators::Vector4_<ContainerAllocator1> & lhs, const ::actuators::Vector4_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actuators

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::actuators::Vector4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuators::Vector4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuators::Vector4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuators::Vector4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuators::Vector4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuators::Vector4_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actuators::Vector4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "390dd8b5493d1ef8649e084b0a6daa79";
  }

  static const char* value(const ::actuators::Vector4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x390dd8b5493d1ef8ULL;
  static const uint64_t static_value2 = 0x649e084b0a6daa79ULL;
};

template<class ContainerAllocator>
struct DataType< ::actuators::Vector4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actuators/Vector4";
  }

  static const char* value(const ::actuators::Vector4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actuators::Vector4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] quad\n"
;
  }

  static const char* value(const ::actuators::Vector4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actuators::Vector4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.quad);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vector4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actuators::Vector4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actuators::Vector4_<ContainerAllocator>& v)
  {
    s << indent << "quad[]" << std::endl;
    for (size_t i = 0; i < v.quad.size(); ++i)
    {
      s << indent << "  quad[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quad[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTUATORS_MESSAGE_VECTOR4_H
